$date
	Mon Dec 20 22:17:53 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var reg 1 # Start $end
$var integer 32 $ counter [31:0] $end
$var integer 32 % i [31:0] $end
$var integer 32 & outfile [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var wire 32 ' instr_addr [31:0] $end
$var wire 32 ( instr [31:0] $end
$scope module ALU $end
$var wire 1 ) Zero_o $end
$var wire 32 * data_o [31:0] $end
$var wire 32 + data2_i [31:0] $end
$var wire 32 , data1_i [31:0] $end
$var wire 3 - ALUCtrl_i [2:0] $end
$var reg 32 . temp [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 3 / ALUCtrl_o [2:0] $end
$var wire 10 0 funct_i [9:0] $end
$var wire 2 1 ALUOp_i [1:0] $end
$var reg 3 2 temp [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 3 data2_in [31:0] $end
$var wire 32 4 data_o [31:0] $end
$var wire 32 5 data1_in [31:0] $end
$upscope $end
$scope module Control $end
$var wire 2 6 ALUOp_o [1:0] $end
$var wire 1 7 ALUSrc_o $end
$var wire 7 8 Op_i [6:0] $end
$var wire 1 9 RegWrite_o $end
$var reg 2 : tmpALUOp [1:0] $end
$var reg 1 ; tmpALUSrc $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 < instr_o [31:0] $end
$var wire 32 = addr_i [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 32 > data_o [31:0] $end
$var wire 1 7 select_i $end
$var wire 32 ? data2_i [31:0] $end
$var wire 32 @ data1_i [31:0] $end
$var reg 32 A temp [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 B pc_i [31:0] $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var reg 32 C pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 D RDaddr_i [4:0] $end
$var wire 32 E RDdata_i [31:0] $end
$var wire 5 F RS1addr_i [4:0] $end
$var wire 32 G RS1data_o [31:0] $end
$var wire 5 H RS2addr_i [4:0] $end
$var wire 32 I RS2data_o [31:0] $end
$var wire 1 9 RegWrite_i $end
$var wire 1 ! clk_i $end
$upscope $end
$scope module Sign_Extend $end
$var wire 12 J data_i [11:0] $end
$var wire 32 K data_o [31:0] $end
$var reg 32 L temp [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010 L
b1010 K
b1010 J
b0 I
b1010 H
b0 G
b0 F
b1010 E
b101 D
b0 C
b100 B
b1010 A
b0 @
b1010 ?
b1010 >
b0 =
b101000000000001010010011 <
1;
b0 :
19
b10011 8
17
b0 6
b0 5
b100 4
b100 3
b10 2
b0 1
b0 0
b10 /
b1010 .
b10 -
b0 ,
b1010 +
b1010 *
0)
b101000000000001010010011 (
b0 '
b11 &
b100000 %
b0 $
0#
0"
0!
$end
#12
1#
1"
#25
b1101 *
b1101 E
b1101 .
b1101 +
b1101 >
b1101 A
b1101 ?
b1101 K
b1101 L
b1101 J
b110 D
b1101 H
b110100000000001100010011 (
b110100000000001100010011 <
b1000 4
b1000 B
b100 '
b100 5
b100 =
b100 C
b1 $
1!
#50
0!
#75
b11 -
b11 /
b11 2
b100110 ?
b100110 K
b100110 L
b10000010 *
b10000010 E
b10000010 .
b10 1
b10 6
b10 :
07
0;
b1000 0
b100110 J
b111 D
b1101 @
b1101 I
b110 H
b1010 ,
b1010 G
b101 F
b110011 8
b10011000101000001110110011 (
b10011000101000001110110011 <
b1100 4
b1100 B
b1000 '
b1000 5
b1000 =
b1000 C
b10 $
1!
#100
0!
#125
b10101001 *
b10101001 E
b10101001 .
b11100 D
b1101 ,
b1101 G
b110 F
b10011000110000111000110011 (
b10011000110000111000110011 <
b10000 4
b10000 B
b1100 '
b1100 5
b1100 =
b1100 C
b11 $
1!
#150
0!
#175
b1100 *
b1100 E
b1100 .
b10 -
b10 /
b10 2
b11111111111111111111111111111111 ?
b11111111111111111111111111111111 K
b11111111111111111111111111111111 L
b11111111111111111111111111111111 +
b11111111111111111111111111111111 >
b11111111111111111111111111111111 A
b0 1
b0 6
b0 :
17
1;
b1111111000 0
b111111111111 J
b110 D
b0 @
b0 I
b11111 H
b10011 8
b11111111111100110000001100010011 (
b11111111111100110000001100010011 <
b10100 4
b10100 B
b10000 '
b10000 5
b10000 =
b10000 C
b100 $
1!
#200
0!
#225
b11111 +
b11111 >
b11111 A
b11111 ?
b11111 K
b11111 L
b0 0
b11111 J
b11110 D
b0 F
b1111100000000111100010011 (
b1111100000000111100010011 <
b11111 *
b11111 E
b11111 .
b11000 4
b11000 B
b10100 '
b10100 5
b10100 =
b10100 C
b0 ,
b0 G
b101 $
1!
#250
0!
#275
b0 -
b0 /
b0 2
b111 ?
b111 K
b111 L
b10000010 +
b10000010 >
b10000010 A
b0 *
b0 E
b0 .
b10 1
b10 6
b10 :
07
0;
b111 0
b111 J
b11100 D
b10000010 @
b10000010 I
b111 H
b1100 ,
b1100 G
b110 F
b110011 8
b11100110111111000110011 (
b11100110111111000110011 <
b11100 4
b11100 B
b11000 '
b11000 5
b11000 =
b11000 C
b110 $
1!
#300
0!
#325
b10000010 *
b10000010 E
b10000010 .
b100 -
b100 /
b100 2
b100 0
b11101 D
b0 ,
b0 G
b11100 F
b11111100100111010110011 (
b11111100100111010110011 <
b100000 4
b100000 B
b11100 '
b11100 5
b11100 =
b11100 C
b111 $
1!
#350
0!
#375
b0 *
b0 E
b0 .
b1101 ?
b1101 K
b1101 L
b0 +
b0 >
b0 A
b1101 J
b1110 D
b0 @
b0 I
b1101 H
b1010 F
b110101010100011100110011 (
b110101010100011100110011 <
b100100 4
b100100 B
b100000 '
b100000 5
b100000 =
b100000 C
b1000 $
1!
#400
0!
#425
b11111111111111111111111101111110 *
b11111111111111111111111101111110 E
b11111111111111111111111101111110 .
b110 -
b110 /
b110 2
b10000000111 ?
b10000000111 K
b10000000111 L
b10000010 +
b10000010 >
b10000010 A
b100000000 0
b10000000111 J
b101 D
b10000010 @
b10000010 I
b111 H
b11100 F
b1000000011111100000001010110011 (
b1000000011111100000001010110011 <
b101000 4
b101000 B
b100100 '
b100100 5
b100100 =
b100100 C
b1001 $
1!
#450
0!
#475
b11111111111111111111111111111000 *
b11111111111111111111111111111000 E
b11111111111111111111111111111000 .
b10 -
b10 /
b10 2
b11111111111111111111111111111000 ?
b11111111111111111111111111111000 K
b11111111111111111111111111111000 L
b11111111111111111111111111111000 +
b11111111111111111111111111111000 >
b11111111111111111111111111111000 A
b0 1
b0 6
b0 :
17
1;
b1111111000 0
b111111111000 J
b11111 D
b0 @
b0 I
b11000 H
b11111 F
b10011 8
b11111111100011111000111110010011 (
b11111111100011111000111110010011 <
b101100 4
b101100 B
b101000 '
b101000 5
b101000 =
b101000 C
b1010 $
1!
#500
0!
#525
b11111111111111111111111111110000 *
b11111111111111111111111111110000 E
b11111111111111111111111111110000 .
b110000 4
b110000 B
b101100 '
b101100 5
b101100 =
b101100 C
b11111111111111111111111111111000 ,
b11111111111111111111111111111000 G
b1011 $
1!
#550
0!
#575
b11111111111111111111111111101000 *
b11111111111111111111111111101000 E
b11111111111111111111111111101000 .
b110100 4
b110100 B
b110000 '
b110000 5
b110000 =
b110000 C
b11111111111111111111111111110000 ,
b11111111111111111111111111110000 G
b1100 $
1!
#600
0!
#625
b111111 +
b111111 >
b111111 A
b111111 ?
b111111 K
b111111 L
b1000 0
b111111 J
b111 D
b11111111111111111111111111101000 @
b11111111111111111111111111101000 I
b11111 H
b0 F
b11111100000000001110010011 (
b11111100000000001110010011 <
b111111 *
b111111 E
b111111 .
b111000 4
b111000 B
b110100 '
b110100 5
b110100 =
b110100 C
b0 ,
b0 G
b1101 $
1!
#650
0!
#675
b10000000010 +
b10000000010 >
b10000000010 A
b111 -
b111 /
b111 2
b10000000010 ?
b10000000010 K
b10000000010 L
b1111 *
b1111 E
b1111 .
b100000101 0
b10000000010 J
b0 @
b0 I
b10 H
b111111 ,
b111111 G
b111 F
b1000000001000111101001110010011 (
b1000000001000111101001110010011 <
b111100 4
b111100 B
b111000 '
b111000 5
b111000 =
b111000 C
b1110 $
1!
#700
0!
#725
b11 *
b11 E
b11 .
b1000000 4
b1000000 B
b111100 '
b111100 5
b111100 =
b111100 C
b1111 ,
b1111 G
b1111 $
1!
#750
0!
#775
b0 *
b0 E
b0 .
b1000100 4
b1000100 B
b1000000 '
b1000000 5
b1000000 =
b1000000 C
b11 ,
b11 G
b10000 $
1!
#800
0!
#825
b10000000001 +
b10000000001 >
b10000000001 A
b10000000001 ?
b10000000001 K
b10000000001 L
b110 *
b110 E
b110 .
b10000000001 J
b110 D
b1 H
b110 F
b1000000000100110101001100010011 (
b1000000000100110101001100010011 <
b1001000 4
b1001000 B
b1000100 '
b1000100 5
b1000100 =
b1000100 C
b1100 ,
b1100 G
b10001 $
1!
#850
0!
#875
b11 *
b11 E
b11 .
b1001100 4
b1001100 B
b1001000 '
b1001000 5
b1001000 =
b1001000 C
b110 ,
b110 G
b10010 $
1!
#900
0!
#925
b1 *
b1 E
b1 .
b1010000 4
b1010000 B
b1001100 '
b1001100 5
b1001100 =
b1001100 C
b11 ,
b11 G
b10011 $
1!
#950
0!
#975
b101 -
b101 /
b101 2
b110 ?
b110 K
b110 L
b1 +
b1 >
b1 A
b10 1
b10 6
b10 :
07
0;
b1 0
b110 J
b11111 D
b1 @
b1 I
b110 H
b11111 F
b110011 8
b11011111001111110110011 (
b11011111001111110110011 <
b11111111111111111111111111010000 *
b11111111111111111111111111010000 E
b11111111111111111111111111010000 .
b1010100 4
b1010100 B
b1010000 '
b1010000 5
b1010000 =
b1010000 C
b11111111111111111111111111101000 ,
b11111111111111111111111111101000 G
b10100 $
1!
#1000
0!
#1025
b11111111111111111111111110100000 *
b11111111111111111111111110100000 E
b11111111111111111111111110100000 .
b1011000 4
b1011000 B
b1010100 '
b1010100 5
b1010100 =
b1010100 C
b11111111111111111111111111010000 ,
b11111111111111111111111111010000 G
b10101 $
1!
#1050
0!
#1075
b10 -
b10 /
b10 2
b0 ?
b0 K
b0 L
b0 +
b0 >
b0 A
b0 1
b0 6
b0 :
17
1;
b0 0
b0 J
b0 D
b0 @
b0 I
b0 H
b0 F
b0 8
b0 (
b0 <
b0 *
b0 E
b0 .
b1011100 4
b1011100 B
b1011000 '
b1011000 5
b1011000 =
b1011000 C
b0 ,
b0 G
b10110 $
1!
#1100
0!
#1125
b1100000 4
b1100000 B
b1011100 '
b1011100 5
b1011100 =
b1011100 C
b10111 $
1!
#1150
0!
#1175
b1100100 4
b1100100 B
b1100000 '
b1100000 5
b1100000 =
b1100000 C
b11000 $
1!
#1200
0!
#1225
b1101000 4
b1101000 B
b1100100 '
b1100100 5
b1100100 =
b1100100 C
b11001 $
1!
#1250
0!
#1275
b1101100 4
b1101100 B
b1101000 '
b1101000 5
b1101000 =
b1101000 C
b11010 $
1!
#1300
0!
#1325
b1110000 4
b1110000 B
b1101100 '
b1101100 5
b1101100 =
b1101100 C
b11011 $
1!
#1350
0!
#1375
b1110100 4
b1110100 B
b1110000 '
b1110000 5
b1110000 =
b1110000 C
b11100 $
1!
#1400
0!
#1425
b1111000 4
b1111000 B
b1110100 '
b1110100 5
b1110100 =
b1110100 C
b11101 $
1!
#1450
0!
#1475
b1111100 4
b1111100 B
b1111000 '
b1111000 5
b1111000 =
b1111000 C
b11110 $
1!
#1500
0!
#1525
b10000000 4
b10000000 B
b1111100 '
b1111100 5
b1111100 =
b1111100 C
1!
